from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from content.prompt_manager import load_prompts, update_prompt, get_all_prompts, set_current_prompt
from config import ADMIN_ID

router = Router()

class AddPromptStates(StatesGroup):
    waiting_for_key = State()
    waiting_for_text = State()

@router.message(Command("add_prompt"))
async def cmd_add_prompt(message: Message, state: FSMContext):
    if str(message.from_user.id) != str(ADMIN_ID):
        await message.answer("‚ùå –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω.")
        return
    await message.answer("üîë –í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –∫–ª—é—á –ø—Ä–æ–º–ø—Ç–∞:")
    await state.set_state(AddPromptStates.waiting_for_key)

@router.message(AddPromptStates.waiting_for_key)
async def add_prompt_get_key(message: Message, state: FSMContext):
    key = message.text.strip()
    prompts = load_prompts()

    if key in prompts:
        await message.answer(f"‚ö†Ô∏è –ö–ª—é—á `{key}` –≤–∂–µ —ñ—Å–Ω—É—î. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /set_prompt —â–æ–± –∑–º—ñ–Ω–∏—Ç–∏.")
        await state.clear()
        return

    await state.update_data(key=key)
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞:")
    await state.set_state(AddPromptStates.waiting_for_text)

@router.message(AddPromptStates.waiting_for_text)
async def add_prompt_get_text(message: Message, state: FSMContext):
    data = await state.get_data()
    key = data["key"]
    new_prompt = message.text.strip()
    update_prompt(key, new_prompt)
    await message.answer(f"‚úÖ –ù–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –∑ –∫–ª—é—á–µ–º `{key}` –¥–æ–¥–∞–Ω–æ.")
    await state.clear()

@router.message(F.text.startswith("/set_prompt"))
async def handle_set_prompt(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω.")

    parts = message.text.strip().split(maxsplit=1)
    if len(parts) != 2:
        return await message.answer("‚ùó –í–∫–∞–∂–∏ –∫–ª—é—á –ø—Ä–æ–º–ø—Ç–∞, –ø—Ä–∏–∫–ª–∞–¥:\n`/set_prompt monday`", parse_mode="Markdown")

    key = parts[1].strip()
    success = set_current_prompt(key)
    if success:
        await message.answer(f"‚úÖ –ü—Ä–æ–º–ø—Ç `{key}` –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —è–∫ –∞–∫—Ç–∏–≤–Ω–∏–π.", parse_mode="Markdown")
    else:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–º–ø—Ç –∑ –∫–ª—é—á–µ–º `{key}` –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", parse_mode="Markdown")

@router.message(F.text == "/get_prompt")
async def handle_get_prompt(message: Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –¢–∏ –Ω–µ –∞–¥–º—ñ–Ω.")

    prompt_list = get_all_prompts()
    await message.answer(prompt_list)